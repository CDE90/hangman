import { type NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";

const imageArray = [
  "/hangman/0.svg",
  "/hangman/1.svg",
  "/hangman/2.svg",
  "/hangman/3.svg",
  "/hangman/4.svg",
  "/hangman/5.svg",
  "/hangman/6.svg",
];

const getImage = (guesses: number) => {
  return (imageArray[guesses] || imageArray.at(-1)) ?? "";
};

const Hangman: NextPage = () => {
  const [word, setWord] = useState("");
  const [letters, setLetters] = useState([] as string[]);
  const [guesses, setGuesses] = useState(0);
  const [gameOver, setGameOver] = useState(false);
  const [active, setActive] = useState(false);
  const [validWord, setValidWord] = useState(false);

  useEffect(() => {
    if (!word) {
      setValidWord(false);
    } else if (word.length < 3) {
      setValidWord(false);
    } else if (!word.match(/^[a-zA-Z ]+$/)) {
      setValidWord(false);
    } else {
      setValidWord(true);
    }
  }, [word]);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="mx-auto flex min-h-screen max-w-3xl flex-col items-center justify-center py-2">
        <h1 className="text-5xl">Hangman</h1>
        {active ? (
          <>
            <p className="pt-4 text-2xl">Guess the word</p>
            <p className="py-4 font-mono text-4xl">
              {word.split("").map((letter, i) => (
                <span
                  key={`${letter}-${i}`}
                  className={
                    letter === " "
                      ? "text-gray-600"
                      : letters.includes(letter)
                      ? "text-green-600"
                      : "text-red-600"
                  }
                >
                  {letter === " "
                    ? "/"
                    : !letters.includes(letter)
                    ? "_"
                    : letter}{" "}
                </span>
              ))}
            </p>
            <div className="flex flex-wrap gap-4 font-mono">
              {Array.from({ length: 26 }, (_, i) =>
                String.fromCharCode(i + 97)
              ).map((letter) => (
                <button
                  key={letter}
                  onClick={() => {
                    setLetters((prev) => {
                      if (prev.includes(letter)) {
                        return prev;
                      }
                      return [...prev, letter];
                    });
                    const lettersChanged = !letters.includes(letter);
                    if (lettersChanged) {
                      setGuesses((prev) => {
                        if (word.includes(letter)) {
                          return prev;
                        }
                        return prev + 1;
                      });
                    }
                    setGameOver((prev) => {
                      if (prev) {
                        return prev;
                      }
                      return word
                        .split("")
                        .every(
                          (letter) => letters.includes(letter) || letter === " "
                        );
                    });
                  }}
                  className={`rounded-md bg-blue-600 p-4 text-4xl text-white ${
                    letters.includes(letter) ? "opacity-50" : ""
                  }`}
                  disabled={letters.includes(letter)}
                >
                  {letter}
                </button>
              ))}
            </div>
            <p className="pt-4 text-2xl">
              {gameOver
                ? "You win!"
                : guesses >= 6
                ? "You lose!"
                : `Guesses: ${guesses}/6`}
            </p>
            <img
              src={getImage(guesses)}
              alt="Hangman"
              className="max-w-96 w-1/2"
            />
            <p>
              <button
                onClick={() => {
                  setLetters([]);
                  setGuesses(0);
                  setGameOver(false);
                }}
              >
                Reset Guesses
              </button>
            </p>
            <p>
              <button
                onClick={() => {
                  setWord("");
                  setLetters([]);
                  setGuesses(0);
                  setGameOver(false);
                  setActive(false);
                }}
              >
                Reset Game
              </button>
            </p>
          </>
        ) : (
          <>
            <p className="pt-4 text-2xl">Enter a word</p>
            <form
              className="my-4 flex flex-col items-center"
              onSubmit={(e) => {
                e.preventDefault();
                if (!validWord) {
                  return alert("Invalid word");
                }
                setLetters([]);
                setGuesses(0);
                setGameOver(false);
                setActive(true);
              }}
            >
              <input
                type="text"
                value={word}
                onChange={(e) => setWord(e.target.value.toLowerCase())}
                className={`my-4 border-2 border-blue-600 p-4 text-4xl ${
                  word.length > 0 && !validWord ? "text-red-600" : ""
                }`}
              />
              <p>
                <button type="submit">Start</button>
              </p>
            </form>
          </>
        )}
      </main>
    </>
  );
};

export default Hangman;
